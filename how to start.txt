I was recently asked how to get started with this option, and I thought I would post this for the benefit of any of you asking yourselves the same question.

 

After getting familiar with the rules and some of the starter code (esp. BC_state_etc.py, and winTester.py),

Make a copy of PlayerSkeletonA.py and name it using the naming rules for your agent.

Then focus on getting parameterized_minimax to work. Here is how  you could go about that:

 

Basic move generator... create a list of successors:
     scan the board in row-major order (needed for parameterized_minimax);
     Generate all possible non-capturing moves for any Friendly piece at the current square.
     Sort the moves by destination square, so they are ordered properly for parameterized_minimax.

Write a basic static evaluator.
Implement minimax.
Implement Alpha-beta pruning.
Fix move gen to avoid moving any frozen piece.
Add in the generation of capturing moves for the easy pieces...
    Withdrawer, Leaper, Pincers, Kings, Coordinator.
Finally, add in imitator captures. This is the hardest part, and maybe the most fun part.
  (Leave it to last, so that the basic framework of your code is solid before adding this complication;
  If you need to refactor, you'll still have a clear structure.)

 

After your parameterized_minimax is working, start developing your makeMove function and

implement iterative deepening there.